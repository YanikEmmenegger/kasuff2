# /nginx/conf.d/nginx.conf

# ============================== #
#          SERVER CONFIG         #
# ============================== #

# ------------------------------ #
# Redirect from kasuff.yanik.pro to kasuff.com (HTTPS)
# ------------------------------ #
server {
    listen 443 ssl;  # Listen on port 443 with SSL
    server_name kasuff.yanik.pro;  # Server name to match incoming requests

    # SSL certificate files
    ssl_certificate /etc/letsencrypt/live/kasuff.yanik.pro/fullchain.pem;  # Path to SSL certificate
    ssl_certificate_key /etc/letsencrypt/live/kasuff.yanik.pro/privkey.pem;  # Path to SSL certificate key

    # Enforce SSL protocols and ciphers for enhanced security
    ssl_protocols TLSv1.2 TLSv1.3;  # Only allow TLS v1.2 and TLS v1.3
    ssl_ciphers HIGH:!aNULL:!MD5;  # Use strong ciphers and exclude weak ones

    # Apply rate limiting and connection limiting
    limit_req zone=one burst=40 nodelay;  # Limit to 200 requests per minute with a burst of 40
    limit_conn addr 20;  # Limit to 20 simultaneous connections per IP

    # Security Headers
    add_header X-Content-Type-Options "nosniff" always;  # Prevent MIME type sniffing
    add_header X-Frame-Options "DENY" always;  # Protect against Clickjacking
    add_header X-XSS-Protection "1; mode=block" always;  # Enable XSS protection
    add_header Referrer-Policy "no-referrer-when-downgrade" always;  # Control referrer information
    add_header Content-Security-Policy "default-src 'self'; script-src 'self'; object-src 'none';" always;  # Define trusted content sources
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;  # Enforce HTTPS with HSTS

    # GZIP Compression
    gzip on;  # Enable GZIP compression
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;  # Specify MIME types to compress
    gzip_proxied any;  # Enable compression for all proxied requests
    gzip_vary on;  # Add 'Vary: Accept-Encoding' header for proxies
    gzip_min_length 256;  # Minimum response size to compress (in bytes)

    # Proxy Settings for Forwarding Requests to Backend
    location / {
        proxy_pass http://backend:2608;  # Forward requests to the backend container on port 2608
        proxy_http_version 1.1;  # Use HTTP/1.1 for proxying
        proxy_set_header Upgrade $http_upgrade;  # Support WebSocket upgrades
        proxy_set_header Connection 'upgrade';  # Maintain persistent connections
        proxy_set_header Host $host;  # Preserve the original Host header
        proxy_set_header X-Real-IP $remote_addr;  # Forward the client's IP address
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward the original X-Forwarded-For header
        proxy_set_header X-Forwarded-Proto $scheme;  # Forward the original protocol (HTTP or HTTPS)

        # Additional proxy settings for security and performance
        proxy_buffering off;  # Disable buffering for real-time applications
        proxy_request_buffering off;  # Disable request buffering
        proxy_set_header Connection "";  # Clear the Connection header to prevent issues
    }
}

# ------------------------------ #
# Redirect HTTP to HTTPS for kasuff.yanik.pro
# ------------------------------ #
server {
    listen 80;  # Listen on port 80 for HTTP
    server_name kasuff.yanik.pro;  # Server name to match incoming requests

    # Apply rate limiting and connection limiting
    limit_req zone=one burst=40 nodelay;  # Limit to 200 requests per minute with a burst of 40
    limit_conn addr 20;  # Limit to 20 simultaneous connections per IP

    # Redirect all HTTP requests to HTTPS, preserving the request URI
    return 301 https://kasuff.yanik.pro$request_uri;  # Permanent redirect to HTTPS
}

# ------------------------------ #
# Serve requests for kasuff.com (HTTPS)
# ------------------------------ #
server {
    listen 443 ssl http2;  # Listen on port 443 with SSL and enable HTTP/2
    server_name kasuff.com;  # Server name to match incoming requests

    # SSL certificate files
    ssl_certificate /etc/letsencrypt/live/kasuff.com/fullchain.pem;  # Path to SSL certificate
    ssl_certificate_key /etc/letsencrypt/live/kasuff.com/privkey.pem;  # Path to SSL certificate key

    # Enforce SSL protocols and ciphers for enhanced security
    ssl_protocols TLSv1.2 TLSv1.3;  # Only allow TLS v1.2 and TLS v1.3
    ssl_ciphers HIGH:!aNULL:!MD5;  # Use strong ciphers and exclude weak ones

    # Enforce SSL session caching for performance
    ssl_session_cache shared:SSL:10m;  # Cache SSL sessions in a shared memory zone named 'SSL' with 10MB storage
    ssl_session_timeout 10m;  # SSL session timeout of 10 minutes

    # Apply rate limiting and connection limiting
    limit_req zone=one burst=40 nodelay;  # Limit to 200 requests per minute with a burst of 40
    limit_conn addr 20;  # Limit to 20 simultaneous connections per IP

    # Security Headers
    add_header X-Content-Type-Options "nosniff" always;  # Prevent MIME type sniffing
    add_header X-Frame-Options "DENY" always;  # Protect against Clickjacking
    add_header X-XSS-Protection "1; mode=block" always;  # Enable XSS protection
    add_header Referrer-Policy "no-referrer-when-downgrade" always;  # Control referrer information
    add_header Content-Security-Policy "default-src 'self'; script-src 'self'; object-src 'none';" always;  # Define trusted content sources
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;  # Enforce HTTPS with HSTS

    # GZIP Compression
    gzip on;  # Enable GZIP compression
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;  # Specify MIME types to compress
    gzip_proxied any;  # Enable compression for all proxied requests
    gzip_vary on;  # Add 'Vary: Accept-Encoding' header for proxies
    gzip_min_length 256;  # Minimum response size to compress (in bytes)

    # Proxy Settings for Forwarding Requests to Backend
    location / {
        proxy_pass http://backend:2608;  # Forward requests to the backend container on port 2608
        proxy_http_version 1.1;  # Use HTTP/1.1 for proxying
        proxy_set_header Upgrade $http_upgrade;  # Support WebSocket upgrades
        proxy_set_header Connection 'upgrade';  # Maintain persistent connections
        proxy_set_header Host $host;  # Preserve the original Host header
        proxy_set_header X-Real-IP $remote_addr;  # Forward the client's IP address
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward the original X-Forwarded-For header
        proxy_set_header X-Forwarded-Proto $scheme;  # Forward the original protocol (HTTP or HTTPS)

        # Additional proxy settings for security and performance
        proxy_buffering off;  # Disable buffering for real-time applications
        proxy_request_buffering off;  # Disable request buffering
        proxy_set_header Connection "";  # Clear the Connection header to prevent issues
    }
}

# ------------------------------ #
# Redirect HTTP to HTTPS for kasuff.com
# ------------------------------ #
server {
    listen 80;  # Listen on port 80 for HTTP
    server_name kasuff.com;  # Server name to match incoming requests

    # Apply rate limiting and connection limiting
    limit_req zone=one burst=40 nodelay;  # Limit to 200 requests per minute with a burst of 40
    limit_conn addr 20;  # Limit to 20 simultaneous connections per IP

    # Redirect all HTTP requests to HTTPS, preserving the request URI
    return 301 https://kasuff.com$request_uri;  # Permanent redirect to HTTPS
}
